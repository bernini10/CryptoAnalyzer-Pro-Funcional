version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto_postgres
    environment:
      POSTGRES_DB: cryptoanalyzer
      POSTGRES_USER: cryptouser
      POSTGRES_PASSWORD: senha123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptouser -d cryptoanalyzer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto_network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crypto_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://cryptouser:senha123@postgres:5432/cryptoanalyzer
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - SECRET_KEY=m122048A@#m122048A@#m122048A@#
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - crypto_network
    restart: unless-stopped

#  # Celery Worker
#  celery_worker:
#    build:
#      context: ./backend
#      dockerfile: Dockerfile
#    container_name: crypto_celery
#    command: celery -A services.tasks worker --loglevel=info
#    environment:
#      - DATABASE_URL=postgresql://crypto_user:crypto_pass@postgres:5432/crypto_db
#      - REDIS_URL=redis://redis:6379/0
#      - CELERY_BROKER_URL=redis://redis:6379/1
#      - CELERY_RESULT_BACKEND=redis://redis:6379/2
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      backend:
#        condition: service_healthy
#    volumes:
#      - ./backend:/app
#    networks:
#      - crypto_network
#    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    image: nginx:alpine
    container_name: crypto_frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - crypto_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto_network:
    driver: bridge

